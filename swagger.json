{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "Swagger Phonebook Project",
    "description": "Routes of Phonebook backend"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://phonebook-backend-kyyd.onrender.com/api-docs/" },
    { "url": "http://localhost:8000/" }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Contacts",
      "description": "Contacts endpoints"
    }
  ],

  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, new user created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (Provided email already exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, user is logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthenticateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Current user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, current user received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation, user is logged out. No response content"
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },

    "/contacts": {
      "get": {
        "tags": ["Contacts"],
        "summary": "All users contacts",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, contacts received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllContactsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Contacts"],
        "summary": "Add new contact",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Contact's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, new contact added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundContactResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "put": {
        "tags": ["Contacts"],
        "summary": "Update contact",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Contact's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundContactResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Contacts"],
        "summary": "Delete contact",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, contact deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteContactResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundContactResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name. It must contain only Latin letters; may contain space, numbers, signs, letters in different case. It must contain minimum 2 characters and maximum 32",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. It must contain only Latin letters; may contain numbers, signs, letters in different case; does not contain a space. It must contain minimum 6 characters and maximum 64",
            "example": "user12345"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "format": "Bearer Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDRjMzdlMTQ5MzBjMTVhMTg1ZGQyMCIsImlhdCI6MTY5MTY2NTM1MSwiZXhwIjoxNjkxNjY3MTUxfQ.6Vv03mAwPPixXqJkc0DfsYWwEY53EGJKGOUq2HZrQ9o"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "User"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@email.com"
              }
            }
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. It must contain only Latin letters, at least one uppercase, lowercase letter and a number; does not contain a space. It must contain minimum 6 characters and maximum 64",
            "example": "user12345"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "format": "Bearer Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDRjMzdlMTQ5MzBjMTVhMTg1ZGQyMCIsImlhdCI6MTY5MTY2NTM1MSwiZXhwIjoxNjkxNjY3MTUxfQ.6Vv03mAwPPixXqJkc0DfsYWwEY53EGJKGOUq2HZrQ9o"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "user"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@email.com"
              }
            }
          }
        }
      },

      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@email.com"
          }
        }
      },

      "AllContactsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Contacts`s id",
              "example": "650d88fbeb3f0699688f4433"
            },
            "name": {
              "type": "string",
              "description": "Contacts's name",
              "example": "John Smith"
            },
            "number": {
              "type": "string",
              "description": "Contacts's number",
              "example": "+380953691456"
            },
            "owner": {
              "type": "string",
              "description": "Contacts's owner",
              "example": "650d84f174dfe68652dc3cff"
            }
          }
        }
      },

      "AddContactRequest": {
        "type": "object",
        "required": ["name", "number"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Contacts's name",
            "example": "John Smith"
          },
          "number": {
            "type": "string",
            "description": "Contacts's number",
            "example": "+380953691456"
          }
        }
      },
      "AddContactResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Contacts`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "name": {
            "type": "string",
            "description": "Contacts's name",
            "example": "John Smith"
          },
          "number": {
            "type": "string",
            "description": "Contacts's number",
            "example": "+380953691456"
          },
          "owner": {
            "type": "string",
            "description": "Contacts's owner",
            "example": "650d84f174dfe68652dc3cff"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "UpdateContactRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Contacts's name",
            "example": "John Smith"
          },
          "number": {
            "type": "string",
            "description": "Contacts's number",
            "example": "+380953691456"
          }
        }
      },
      "UpdateContactResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Contact`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "name": {
            "type": "string",
            "description": "Contacts's name",
            "example": "John Smith"
          },
          "number": {
            "type": "string",
            "description": "Contacts's number",
            "example": "+380953691456"
          },
          "owner": {
            "type": "string",
            "description": "Contacts's owner",
            "example": "650d84f174dfe68652dc3cff"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "DeleteContactResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Contact`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "name": {
            "type": "string",
            "description": "Contacts's name",
            "example": "John Smith"
          },
          "number": {
            "type": "string",
            "description": "Contacts's number",
            "example": "+380953691456"
          },
          "owner": {
            "type": "string",
            "description": "Contacts's owner",
            "example": "650d84f174dfe68652dc3cff"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "errorNotFoundContactResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "No contact found"
          }
        }
      },

      "errorBadRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "The specific request body error will be described here."
          }
        }
      },
      "errorConflictResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Email already in use"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not authorized"
          }
        }
      },
      "errorUnauthenticateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Email or password is wrong"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not Found"
          }
        }
      },
      "errorServerResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "The specific server error will be described here."
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
